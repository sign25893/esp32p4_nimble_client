#include <string>
#include <NimBLEDevice.h>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const NimBLEAdvertisedDevice* advDevice = nullptr;
static NimBLERemoteCharacteristic* pCharToWrite = nullptr;
static std::string targetMacAddress = "";
static int receivedIntValue = 0;  // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–Ω—è—Ç–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
static float receivedFloatValue = 0.0f;  // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
static int sendValue = 0;  // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

/** –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞ */
class ClientCallbacks : public NimBLEClientCallbacks {
    void onConnect(NimBLEClient* pClient) override {
        printf("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É!\n");
    }

    void onDisconnect(NimBLEClient* pClient, int reason) override {
        printf("\n–û—Ç–∫–ª—é—á–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞ %d. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...\n", reason);
        advDevice = nullptr;
    }
} clientCallbacks;

/** –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
class ScanCallbacks : public NimBLEScanCallbacks {
    void onResult(const NimBLEAdvertisedDevice* advertisedDevice) override {  // –∏—Å–ø–æ–ª—å–∑—É–µ–º const
        printf("\n–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s\n", advertisedDevice->toString().c_str());

        if (advertisedDevice->getAddress().toString() == targetMacAddress) {
            printf("–¶–µ–ª–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: %s\n", targetMacAddress.c_str());
            advDevice = advertisedDevice;
        }
    }
} scanCallbacks;


/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
void notifyCB(NimBLERemoteCharacteristic* pRemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
    printf("\n[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –æ—Ç %s\n", pRemoteCharacteristic->getClient()->getPeerAddress().toString().c_str());
    printf("   –°–µ—Ä–≤–∏—Å: %s\n", pRemoteCharacteristic->getRemoteService()->getUUID().toString().c_str());
    printf("   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: %s\n", pRemoteCharacteristic->getUUID().toString().c_str());

    printf("   –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (HEX): ");
    for (size_t i = 0; i < length; ++i) {
        printf("%02X ", pData[i]);
    }
    printf("\n");

    // –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞–∫ float
    if (length >= 4) {
        union {
            uint8_t bytes[4];
            float fValue;
        } converter;

        memcpy(converter.bytes, pData, 4);
        receivedFloatValue = converter.fValue;
        printf("   –ò–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (Float): %.2f –º–º\n", receivedFloatValue);
    }

    printf("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n");
}


/** –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö */
void sendIntegerValue() {
    if (pCharToWrite && pCharToWrite->canWrite()) {
        uint8_t data[2] = { (uint8_t)(sendValue >> 8), (uint8_t)(sendValue & 0xFF) };
        pCharToWrite->writeValue(data, sizeof(data), false);
        printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", sendValue);
    }
}

/** –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É */
bool connectToServer() {
    if (!advDevice) {
        printf("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫...\n");
        return false;
    }

    NimBLEClient* pClient = NimBLEDevice::createClient();
    pClient->setClientCallbacks(&clientCallbacks, false);

    if (!pClient->connect(advDevice)) {
        printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!\n");
        return false;
    }

    printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ %s\n", pClient->getPeerAddress().toString().c_str());

    NimBLERemoteService* pSvc = pClient->getService("00000000-0001-0001-0000-CECCC8CAD12E");
    if (!pSvc) {
        printf("–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n");
        pClient->disconnect();
        return false;
    }

    NimBLERemoteCharacteristic* pChr = pSvc->getCharacteristic("00000000-0001-0001-0000-CECCC8CAD12E");
    if (!pChr) {
        printf("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n");
        pClient->disconnect();
        return false;
    }

    if (pChr->canNotify()) {
        pChr->subscribe(true, notifyCB);
    }

    printf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n");

    pCharToWrite = pChr; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏

    while (pClient->isConnected()) {
        sendIntegerValue(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }

    printf("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ... –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É.\n");
    return false;
}

/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BLE */
void ble_init() {
    printf("\n–ó–∞–ø—É—Å–∫ BLE-–∫–ª–∏–µ–Ω—Ç–∞\n");
    NimBLEDevice::init("NimBLE-Client");
    NimBLEDevice::setPower(3);

    NimBLEScan* pScan = NimBLEDevice::getScan();
    pScan->setScanCallbacks(&scanCallbacks, false);
    pScan->setInterval(100);
    pScan->setWindow(100);
    pScan->setActiveScan(true);
}

/** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º MAC-–∞–¥—Ä–µ—Å–æ–º */
void ble_connect(const std::string& macAddress) {
    targetMacAddress = macAddress;
    NimBLEScan* pScan = NimBLEDevice::getScan();

    while (true) {
        if (!advDevice) {
            printf("\n–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...\n");
            pScan->start(5000, false);
        }

        if (advDevice) {
            if (connectToServer()) {
                printf("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –û–∂–∏–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n");
            } else {
                printf("\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫...\n");
                advDevice = nullptr;
            }
        }

        vTaskDelay(5000 / portTICK_PERIOD_MS);
    }
}

/** –ì–µ—Ç—Ç–µ—Ä—ã */
int ble_getReceivedIntValue() {
    return receivedIntValue;
}

float ble_getReceivedFloatValue() {
    return receivedFloatValue;
}

/** –°–µ—Ç—Ç–µ—Ä */
void ble_setSendValue(int value) {
    sendValue = value;
}
